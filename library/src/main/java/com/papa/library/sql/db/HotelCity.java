package com.papa.library.sql.db;

import java.util.List;
import com.papa.library.sql.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.papa.library.sql.dao.HotelCityDao;
import com.papa.library.sql.dao.HotelCommercialDao;
import com.papa.library.sql.dao.HotelDistrictDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "HOTEL_CITY".
 */
public class HotelCity {

    private Long id;
    private Integer hot;
    private Long provinceId;
    private String englishName;
    private String name;
    private String sortKey;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient HotelCityDao myDao;

    private List<HotelCommercial> hotelCommercialList;
    private List<HotelDistrict> hotelDistrictList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public HotelCity() {
    }

    public HotelCity(Long id) {
        this.id = id;
    }

    public HotelCity(Long id, Integer hot, Long provinceId, String englishName, String name, String sortKey) {
        this.id = id;
        this.hot = hot;
        this.provinceId = provinceId;
        this.englishName = englishName;
        this.name = name;
        this.sortKey = sortKey;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHotelCityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getHot() {
        return hot;
    }

    public void setHot(Integer hot) {
        this.hot = hot;
    }

    public Long getProvinceId() {
        return provinceId;
    }

    public void setProvinceId(Long provinceId) {
        this.provinceId = provinceId;
    }

    public String getEnglishName() {
        return englishName;
    }

    public void setEnglishName(String englishName) {
        this.englishName = englishName;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSortKey() {
        return sortKey;
    }

    public void setSortKey(String sortKey) {
        this.sortKey = sortKey;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<HotelCommercial> getHotelCommercialList() {
        if (hotelCommercialList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HotelCommercialDao targetDao = daoSession.getHotelCommercialDao();
            List<HotelCommercial> hotelCommercialListNew = targetDao._queryHotelCity_HotelCommercialList(id);
            synchronized (this) {
                if(hotelCommercialList == null) {
                    hotelCommercialList = hotelCommercialListNew;
                }
            }
        }
        return hotelCommercialList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetHotelCommercialList() {
        hotelCommercialList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<HotelDistrict> getHotelDistrictList() {
        if (hotelDistrictList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HotelDistrictDao targetDao = daoSession.getHotelDistrictDao();
            List<HotelDistrict> hotelDistrictListNew = targetDao._queryHotelCity_HotelDistrictList(id);
            synchronized (this) {
                if(hotelDistrictList == null) {
                    hotelDistrictList = hotelDistrictListNew;
                }
            }
        }
        return hotelDistrictList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetHotelDistrictList() {
        hotelDistrictList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
