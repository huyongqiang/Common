package com.papa.library.sql.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.papa.library.sql.db.HotelCity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOTEL_CITY".
*/
public class HotelCityDao extends AbstractDao<HotelCity, Long> {

    public static final String TABLENAME = "HOTEL_CITY";

    /**
     * Properties of entity HotelCity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Hot = new Property(1, Integer.class, "hot", false, "HOT");
        public final static Property ProvinceId = new Property(2, Long.class, "provinceId", false, "PROVINCE_ID");
        public final static Property EnglishName = new Property(3, String.class, "englishName", false, "ENGLISH_NAME");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property SortKey = new Property(5, String.class, "sortKey", false, "SORT_KEY");
    };

    private DaoSession daoSession;


    public HotelCityDao(DaoConfig config) {
        super(config);
    }
    
    public HotelCityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOTEL_CITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"HOT\" INTEGER," + // 1: hot
                "\"PROVINCE_ID\" INTEGER," + // 2: provinceId
                "\"ENGLISH_NAME\" TEXT," + // 3: englishName
                "\"NAME\" TEXT," + // 4: name
                "\"SORT_KEY\" TEXT);"); // 5: sortKey
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOTEL_CITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HotelCity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer hot = entity.getHot();
        if (hot != null) {
            stmt.bindLong(2, hot);
        }
 
        Long provinceId = entity.getProvinceId();
        if (provinceId != null) {
            stmt.bindLong(3, provinceId);
        }
 
        String englishName = entity.getEnglishName();
        if (englishName != null) {
            stmt.bindString(4, englishName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String sortKey = entity.getSortKey();
        if (sortKey != null) {
            stmt.bindString(6, sortKey);
        }
    }

    @Override
    protected void attachEntity(HotelCity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HotelCity readEntity(Cursor cursor, int offset) {
        HotelCity entity = new HotelCity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // hot
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // provinceId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // englishName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // sortKey
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HotelCity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHot(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setProvinceId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setEnglishName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSortKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HotelCity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HotelCity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
